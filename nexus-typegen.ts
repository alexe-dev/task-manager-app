/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Project: { // root type
    id?: string | null; // ID
    stages?: Array<NexusGenRootTypes['Stage'] | null> | null; // [Stage]
    title?: string | null; // String
  }
  Query: {};
  Stage: { // root type
    id?: string | null; // ID
    order?: number | null; // Int
    tasks?: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
    title?: string | null; // String
  }
  Task: { // root type
    id?: string | null; // ID
    isCompleted?: boolean | null; // Boolean
    order?: number | null; // Int
    title?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createProject: NexusGenRootTypes['Project']; // Project!
    createStage: NexusGenRootTypes['Stage']; // Stage!
    createTask: NexusGenRootTypes['Task']; // Task!
    deleteProject: string; // String!
    deleteStage: string; // String!
    deleteTask: string; // String!
    toggleTask: NexusGenRootTypes['Task']; // Task!
  }
  Project: { // field return type
    id: string | null; // ID
    stages: Array<NexusGenRootTypes['Stage'] | null> | null; // [Stage]
    title: string | null; // String
  }
  Query: { // field return type
    getProjectById: NexusGenRootTypes['Project'] | null; // Project
    getProjects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
  }
  Stage: { // field return type
    id: string | null; // ID
    order: number | null; // Int
    tasks: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
    title: string | null; // String
  }
  Task: { // field return type
    id: string | null; // ID
    isCompleted: boolean | null; // Boolean
    order: number | null; // Int
    title: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createProject: 'Project'
    createStage: 'Stage'
    createTask: 'Task'
    deleteProject: 'String'
    deleteStage: 'String'
    deleteTask: 'String'
    toggleTask: 'Task'
  }
  Project: { // field return type name
    id: 'ID'
    stages: 'Stage'
    title: 'String'
  }
  Query: { // field return type name
    getProjectById: 'Project'
    getProjects: 'Project'
  }
  Stage: { // field return type name
    id: 'ID'
    order: 'Int'
    tasks: 'Task'
    title: 'String'
  }
  Task: { // field return type name
    id: 'ID'
    isCompleted: 'Boolean'
    order: 'Int'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProject: { // args
      title: string; // String!
    }
    createStage: { // args
      projectId: string; // ID!
      title: string; // String!
    }
    createTask: { // args
      projectId: string; // ID!
      stageId: string; // ID!
      title: string; // String!
    }
    deleteProject: { // args
      projectId: string; // ID!
    }
    deleteStage: { // args
      projectId: string; // ID!
      stageId: string; // ID!
    }
    deleteTask: { // args
      projectId: string; // ID!
      stageId: string; // ID!
      taskId: string; // ID!
    }
    toggleTask: { // args
      projectId: string; // ID!
      stageId: string; // ID!
      taskId: string; // ID!
    }
  }
  Query: {
    getProjectById: { // args
      projectId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}